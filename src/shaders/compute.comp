#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
} time;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) readonly buffer InputGrass {
    Blade inputBlades[]; 
} inputBlades;

layout(set = 2, binding = 1) writeonly buffer CulledGrass {
    Blade culledBlades[]; 
} culledBlades; 

layout(set = 2, binding = 2) buffer NumBlades {
      uint vertexCount;
 	  uint instanceCount;
 	  uint firstVertex;   
 	  uint firstInstance; 
} numBlades; 

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

mat4 rot(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0; 
        numBlades.firstInstance = 0; 
	}
	barrier(); // Wait till all threads reach this point

    uint index = atomicAdd(numBlades.vertexCount, 1); 
    Blade b = inputBlades.inputBlades[gl_GlobalInvocationID.x]; 

    // TODO: Apply forces on every blade and update the vertices in the buffer

    // gravity

    // gravity magnitude/direction
    vec4 D = vec4(0, -1, 0, 1);

    mat4 rotation = rot(vec3(0, 1, 0), b.v0.w);
    vec3 f = (rotation * vec4(0, 0, 1, 0)).xyz; 

    vec3 gEnvironment = normalize(D.xyz) * D.w;   // global gravity force
    vec3 gFront = 0.25f * length(gEnvironment) * f;  

    vec3 gravity = gEnvironment + gFront; 

    // recovery 
    float stiffness = b.up.w; 
    vec3 iv2 = b.v0.xyz + (b.up.xyz * b.v1.w); // initial position of v2
    vec3 recovery = (iv2 - b.v2.xyz) * stiffness; 

    // wind
    float wind;
    
    // correct position


    b.v2.xyz += (gravity + recovery) * time.deltaTime;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    

    culledBlades.culledBlades[index] = b; 
}
