#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InputGrass {
    Blade inputBlades[]; 
};

layout(set = 2, binding = 1) writeonly buffer CulledGrass {
    Blade culledBlades[]; 
}; 

layout(set = 2, binding = 2) buffer NumBlades {
      uint vertexCount;
 	  uint instanceCount;
 	  uint firstVertex;   
 	  uint firstInstance; 
} numBlades; 

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

mat4 rot(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

#define TOLERANCE -0.0

bool inFrustum(vec3 p) {
    vec4 pHom = vec4(p, 1); // homogenous form
    vec4 pNor = camera.proj * camera.view * pHom; 
    float h = pNor.w + TOLERANCE; 

    bool vx = p.x > -h && p.x < h; 
    bool vy = p.y > -h && p.y < h; 
    bool vz = p.z > -h && p.z < h; 

    return vx && vy && vz; 
}

float hash( in ivec2 p )  // this hash is not production ready, please
{                         // replace this by something better
    // 2D -> 1D
    int n = p.x*3 + p.y*113;
    // 1D hash by Hugo Elias
	n = (n << 13) ^ n;
    n = n * (n * n * 15731 + 789221) + 1376312589;
    return -1.0+2.0*float( n & 0x0fffffff)/float(0x0fffffff);
}

float noise( in vec2 p )
{
    ivec2 i = ivec2(floor( p ));
    vec2 f = fract( p );
	
    // cubic interpolant
    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( hash( i + ivec2(0,0) ), 
                     hash( i + ivec2(1,0) ), u.x),
                mix( hash( i + ivec2(0,1) ), 
                     hash( i + ivec2(1,1) ), u.x), u.y);
}


#define HACK false
#define CULL true

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0; 
        numBlades.firstInstance = 0; 
	}
	barrier(); // Wait till all threads reach this point

    Blade b = inputBlades[gl_GlobalInvocationID.x]; 

    vec3 v0 = b.v0.xyz; 
    vec3 v1 = b.v1.xyz; 
    vec3 v2 = b.v2.xyz; 
    vec3 up = b.up.xyz; 
    float orientation = b.v0.w; 
    float height = b.v1.w; 
    float width = b.v2.w; 
    float stiffness = b.up.w; 


    // TODO: Apply forces on every blade and update the vertices in the buffer

    // gravity

    mat4 rotation = rot(up, orientation);
    vec3 f = (rotation * vec4(0, 0, 1, 0)).xyz;

    // gravity magnitude/direction
    vec4 D = vec4(0, -0.1, 0, 1);
    vec3 gEnvironment = normalize(D.xyz) * D.w;   // global gravity force
    vec3 gFront = 0.25f * length(gEnvironment) * f;  

    vec3 gravity = gEnvironment + gFront; 

    // recovery 
    vec3 iv2 = v0 + (up * height); // initial position of v2
    vec3 recovery = (iv2 - v2) * stiffness; 

    // wind
    float n = noise(v0.xz); 
    vec3 windDir = 4. * sin(n + vec3(totalTime)) * cos(n + vec3(totalTime)); 
    float fd = 1 - length(dot(normalize(windDir), normalize(v2 - v0)));
    float fr = dot((v2 - v0), up) / height;
    vec3 wind = windDir * (fd * fr);
    
    // correct position

    // Not sure why delta time doesn't work, but using deltaTime makes stuttering movement
    if (HACK) {
        b.v2.xyz += (gravity + recovery + wind) * 0.001;
    }
    else {
        //v2 += (gravity + recovery + wind) * deltaTime; 
        v2 += (gravity + recovery + wind) * deltaTime; 

        v2 = v2 - up * min(dot(up, (v2 - v0)), 0.); 
        float lproj = length(v2 - v0 - up * dot((v2 - v0), up));
        v1 = v0 + height * up * max(1. - (lproj / height), 0.05 * max(lproj / height, 1)); 

        float L0 = distance(v2, v0);
        float L1 = distance(v1, v0) + distance(v2, v1);
        float L = 0.25 * (2 * L0 + 2 * L1);  
        float r = height/L;

        v1 = v0 + r * (v1 - v0); 
        v2 = v1 + r * (v2 - v1); 
        
        inputBlades[gl_GlobalInvocationID.x].v1.xyz = v1;
        inputBlades[gl_GlobalInvocationID.x].v2.xyz = v2;

    }

    // -- Culling --

    if (CULL)
    {
        // -- cull based on blade orientation (in relation to camera) --
        vec3 cameraPos = (inverse(camera.view) * vec4(0, 0, 0, 1)).xyz; 

        // project camera direction onto grass plane
        // direction and distance to camera
        vec3 dirCamera = v0 - cameraPos - up * dot(v0 - cameraPos, up); 
        vec3 dirBlade = normalize((rotation * vec4(1, 0, 0, 0)).xyz);  // direction of blade along it's width 

        if (0.9 < abs(dot(normalize(dirCamera), dirBlade))) {
            return; 
        }

        // -- cull based on the camera's frustum  --

        // approximate mid point of grass blade
        vec3 m = .25 * v0 * .5 * v1 * .25 * v2;
        
        if (!inFrustum(v0) && !inFrustum(m) && !inFrustum(v1)) {
            return; 
        }

        // --cull based on distance --

        if (length(dirCamera) > 50.0) {
            return; 
        }
        else if (length(dirCamera) > 40.0 && gl_GlobalInvocationID.x % 2 == 0) {
            return; 
        }
        else if (length(dirCamera) > 10.0 && gl_GlobalInvocationID.x % 10 == 0) {
            return; 
        }

    }

    uint index = atomicAdd(numBlades.vertexCount, 1); 
    if (HACK) {
        culledBlades[index] = b; 
    }
    else
    {
        culledBlades[index] = inputBlades[gl_GlobalInvocationID.x]; 
    }
}
